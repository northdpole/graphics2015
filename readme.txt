Paul Lambert (lamber10)
CS418 MP2 - Spring 2012 @ UIUC

Code is in the format of an Xcode project, as an OS X Command Line C++ application. It compiles and runs oh-so dandily on my machine, running Xcode 4.2 (4D119) on OS X 10.7.3. 

The executable file automatically generated by Xcode 4.2 can be found within this directory, at lamber10_mp2/lamber10_mp2 as your typical Unix Executable File.

The project itself can be opened by double clicking on the "mp2.xcodeproj" file within the main directory, and ran by clicking the giant ([>) button on the top-left of Xcode. 

This program has been rigged to work with both arrow keys and the typical WASD key binding style found in many popular computer games. Whichever you prefer will work just swell. Please note, in the spirit of real, actually existent, and usually completely awesome aircraft, pitch has been properly implemented, such that pushing the [Up Arrow] key or [W] key will bring the tip of the nose down towards Earth (or whatever territorial planet on which this bird soars). 

You'll find a total of three *.cpp files, each with an accompanying *.h file. 
- main.cpp: entry point for the code. Slightly modified version of the mountain.cpp file that was provided for us.

- plane.cpp: definition for the Plane class, which encapsulates vector operations performed on gluLookAt to transform the world around us. It's got a pretty little API and everything. (though, do note, since this was implemented in the first person, it's pretty much a singleton at this point - not that it would be particularly difficult to changeâ€¦)
	*also, I'd like to apologize for the near-Hungarian Style notation in this class. I hate it as much as the next guy. Really. I just kept getting thrown off by very similar variable names :(  YOU TRY SPENDING FOUR HOURS TRYING TO FIGURE OUT WHICH VECTOR IS WHICH! Hah! 

- vector_operations.cpp: definition for the VectorOperations singleton class. It defines such wonderful pastimes as taking the cross product of two GLfloat*'s, or finding the normal vector for lonely GLfloat*!

Documentation for all methods and relevant design decisions can be found within the header files in an almost Javadoc-esque manner. It gets pretty repetitive to @param and @return methods which are only going to be seen by a limited audience, particularly considering that audience is most certainly in the know-how. That said, whenever something needs to be pointed out, I made sure it was documented. Additionally, I haven't gotten much sleep lately, so they may be just a tad goofy. 

Who knows, if you're still actually reading down here, you may enjoy reading the comments over there! Yeah! Xcode time! WOOHOO!

(Sorry. I'll stop now.)
